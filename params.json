{"name":"Open Exoplanet Catalogue Python Interface","tagline":"The Python interface for the Open Exoplanet Catalogue","body":"# Open Exoplanet Catalogue Python\r\n\r\nThis python interface serves as a link between the raw XML of the [Open Exoplanet Catalogue](https://github.com/hannorein/open_exoplanet_catalogue). It allows:\r\n* Searching of planets (including alternate names)\r\n* Easy reference of planet parameters ie GJ1214b.ra, GJ1214b.T, GJ1214b.R\r\n* Calculation of values like the transit duration.\r\n* Define planet types and query planets to find out what they are\r\n* Easy rescale of units\r\n* Easily navigate hierarchy (ie from planet to star or star to planets)\r\n* Availability of system parameters in planets (ie ra, dec, d (distance))\r\n\r\nPlease note that this package is currently in Beta. The Docs are incomplete, it is not fully unit tested and any and all methods and variables are subjected to change in the development process\r\n\r\n# Installation\r\nThis module depends on\r\n* [Quantities](https://github.com/python-quantities/python-quantities)\r\n* numpy\r\n* [Open Exoplanet Catalogue](https://github.com/hannorein/open_exoplanet_catalogue) (somewhere on your system)\r\n\r\nTo install simply clone the repo and move into your python path. I have named the repo folder exoplanetcatalogue for ease. In future this package will be in a package manager which will avoid the naming issue.\r\n\r\n# Usage\r\n\r\n\timport exoplanetcatalogue as oec # Note: exoplanetcatalogue should be your folder name of the repo\r\n\tdatabaseLocation = '/git/open-exoplanet-catalogue-atmospheres/systems/' # Your path here\r\n\toecDB = oec.OECDatabase(databaseLocation)\r\n\r\nYou can then access the lists\r\n\r\n\toecDB.systems\r\n\toecDB.stars\r\n\toecDB.planets\r\n\toecDB.transitingPlanets\r\n\r\nAnd perform more advanced queries such as fetching all planets whose radius is less than 10 Earth Radii\r\n\t\r\n\tsuperEarths = [planet for planet in oecDB.planets if planet.R < (10 * oec.R_e)]\r\n\r\nTo choose a planet\r\n\r\n\tkepler60b = oecDB.searchPlanet('kepler60b')\r\n\tkepler60planets = oecDB.searchPlanet('kepler60') # or all the kepler 60 planets\r\n\tkepler60 = kepler60b.star #to het the star kepler-60\r\n\r\n\tkepler60b.R # get planet radius\r\n\t>>> array(0.207777) * jupiter_radius # this works like an array in most functions\r\n\r\n\tkepler60b.R.rescale(oec.R_e) # See Units section for more\r\n\t>>> array(2.280002801287082) * earth_radius\r\n\r\n\tkepler60b.R.rescale(pq.m) # import quantities as pq (se units section)\r\n\t>>> array(14525897.847) * m\r\n\r\n\tkepler60b.RA\r\n\t>>> '20 02 28'\r\n\r\n\tgj1214.type()\r\n\t>>> 'Warm Super-Earth' # Note: This depends on your asumptions, see later\r\n\r\nFor a full list of planet, star and system parameters see [this wiki page](https://github.com/ryanvarley/open-exoplanet-catalogue-python/wiki/Planet,-Star-and-Systems-parameters-and-Methods)\r\n\r\n# Units\r\nunits are handled by the quantities package\r\n`import quantities as pq`\r\n\r\nYou can then access most units and constants such as meters pq.m, astronomical units pq.au etc!\r\n\r\nSome astronomy units such as R_e, R_j, R_s (where e is Earth, j is Jupiter and s in the Sun) arent included (yet) in quantities so you need to refer to them as oec.R_e (or whatever you called this module on import)\r\n\r\nThere are also M_e, M_s, M_j.\r\n\r\nPlease read more about [Quantities](https://github.com/python-quantities/python-quantities)\r\n\r\n# Equations\r\n\r\nThe module contains several equations at the moment and i plan to add many more. If you want one why not write it and send me a pull request or open an issue.\r\n\r\n\r\n\tkepler60b.calcSurfaceGravity()\r\n\t>>> array(10.318715585166878) * m/s**2\r\n\r\n\tkepler60b.calcLogg()\r\n\t>>> 6.93912947949421\r\n\r\n\tgj1214.calcTansitDuration()\r\n\tarray(54.73064331158644) * min\r\n\r\nsee [the docs](https://github.com/ryanvarley/open-exoplanet-catalogue-python/wiki/Planet,-Star-and-Systems-parameters-and-Methods) for a full list\r\n\r\n# Assumptions\r\n\r\nThis is a hard module to make and i will open an issue on it soon. Currently they are stored in the dictionary exoplanetcatalogue.assumptions.planetAssumptions.\r\n\r\nOverwriting these values (or adding new ones) will change the output.\r\n\r\nPlease see assumptions.py for how to do this.\r\n\r\n# License\r\n\r\nCopyright (C) 2013 Ryan Varley\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this package to deal with the package without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the package, and to permit persons to whom the package is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the package. A reference to the package shall be included in all scientific publications that make use of the package.\r\n\r\nTHE PACKAGE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE PACKAGE OR THE USE OR OTHER DEALINGS IN THE PACKAGE.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}